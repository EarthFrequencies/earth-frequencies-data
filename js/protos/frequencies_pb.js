// source: frequencies.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.frequencies.FrequencyAllocation', null, global);
goog.exportSymbol('proto.frequencies.FrequencyAllocationBlock', null, global);
goog.exportSymbol('proto.frequencies.FrequencyAllocations', null, global);
goog.exportSymbol('proto.frequencies.FrequencyBand', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frequencies.FrequencyBand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.frequencies.FrequencyBand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frequencies.FrequencyBand.displayName = 'proto.frequencies.FrequencyBand';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frequencies.FrequencyAllocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.frequencies.FrequencyAllocation.repeatedFields_, null);
};
goog.inherits(proto.frequencies.FrequencyAllocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frequencies.FrequencyAllocation.displayName = 'proto.frequencies.FrequencyAllocation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frequencies.FrequencyAllocationBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.frequencies.FrequencyAllocationBlock.repeatedFields_, null);
};
goog.inherits(proto.frequencies.FrequencyAllocationBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frequencies.FrequencyAllocationBlock.displayName = 'proto.frequencies.FrequencyAllocationBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.frequencies.FrequencyAllocations = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.frequencies.FrequencyAllocations.repeatedFields_, null);
};
goog.inherits(proto.frequencies.FrequencyAllocations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.frequencies.FrequencyAllocations.displayName = 'proto.frequencies.FrequencyAllocations';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frequencies.FrequencyBand.prototype.toObject = function(opt_includeInstance) {
  return proto.frequencies.FrequencyBand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frequencies.FrequencyBand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frequencies.FrequencyBand.toObject = function(includeInstance, msg) {
  var f, obj = {
    lower: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    upper: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frequencies.FrequencyBand}
 */
proto.frequencies.FrequencyBand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frequencies.FrequencyBand;
  return proto.frequencies.FrequencyBand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frequencies.FrequencyBand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frequencies.FrequencyBand}
 */
proto.frequencies.FrequencyBand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLower(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUpper(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frequencies.FrequencyBand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frequencies.FrequencyBand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frequencies.FrequencyBand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frequencies.FrequencyBand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLower();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getUpper();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double lower = 1;
 * @return {number}
 */
proto.frequencies.FrequencyBand.prototype.getLower = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.frequencies.FrequencyBand} returns this
 */
proto.frequencies.FrequencyBand.prototype.setLower = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double upper = 2;
 * @return {number}
 */
proto.frequencies.FrequencyBand.prototype.getUpper = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.frequencies.FrequencyBand} returns this
 */
proto.frequencies.FrequencyBand.prototype.setUpper = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.frequencies.FrequencyAllocation.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frequencies.FrequencyAllocation.prototype.toObject = function(opt_includeInstance) {
  return proto.frequencies.FrequencyAllocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frequencies.FrequencyAllocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frequencies.FrequencyAllocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    service: jspb.Message.getFieldWithDefault(msg, 1, ""),
    primary: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    footnotesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frequencies.FrequencyAllocation}
 */
proto.frequencies.FrequencyAllocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frequencies.FrequencyAllocation;
  return proto.frequencies.FrequencyAllocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frequencies.FrequencyAllocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frequencies.FrequencyAllocation}
 */
proto.frequencies.FrequencyAllocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setService(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPrimary(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addFootnotes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frequencies.FrequencyAllocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frequencies.FrequencyAllocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frequencies.FrequencyAllocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frequencies.FrequencyAllocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getService();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrimary();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getFootnotesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string service = 1;
 * @return {string}
 */
proto.frequencies.FrequencyAllocation.prototype.getService = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.frequencies.FrequencyAllocation} returns this
 */
proto.frequencies.FrequencyAllocation.prototype.setService = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool primary = 2;
 * @return {boolean}
 */
proto.frequencies.FrequencyAllocation.prototype.getPrimary = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.frequencies.FrequencyAllocation} returns this
 */
proto.frequencies.FrequencyAllocation.prototype.setPrimary = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated string footnotes = 3;
 * @return {!Array<string>}
 */
proto.frequencies.FrequencyAllocation.prototype.getFootnotesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.frequencies.FrequencyAllocation} returns this
 */
proto.frequencies.FrequencyAllocation.prototype.setFootnotesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.frequencies.FrequencyAllocation} returns this
 */
proto.frequencies.FrequencyAllocation.prototype.addFootnotes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.frequencies.FrequencyAllocation} returns this
 */
proto.frequencies.FrequencyAllocation.prototype.clearFootnotesList = function() {
  return this.setFootnotesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.frequencies.FrequencyAllocationBlock.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frequencies.FrequencyAllocationBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.frequencies.FrequencyAllocationBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frequencies.FrequencyAllocationBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frequencies.FrequencyAllocationBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    band: (f = msg.getBand()) && proto.frequencies.FrequencyBand.toObject(includeInstance, f),
    allocationsList: jspb.Message.toObjectList(msg.getAllocationsList(),
    proto.frequencies.FrequencyAllocation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frequencies.FrequencyAllocationBlock}
 */
proto.frequencies.FrequencyAllocationBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frequencies.FrequencyAllocationBlock;
  return proto.frequencies.FrequencyAllocationBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frequencies.FrequencyAllocationBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frequencies.FrequencyAllocationBlock}
 */
proto.frequencies.FrequencyAllocationBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.frequencies.FrequencyBand;
      reader.readMessage(value,proto.frequencies.FrequencyBand.deserializeBinaryFromReader);
      msg.setBand(value);
      break;
    case 2:
      var value = new proto.frequencies.FrequencyAllocation;
      reader.readMessage(value,proto.frequencies.FrequencyAllocation.deserializeBinaryFromReader);
      msg.addAllocations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frequencies.FrequencyAllocationBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frequencies.FrequencyAllocationBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frequencies.FrequencyAllocationBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frequencies.FrequencyAllocationBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBand();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.frequencies.FrequencyBand.serializeBinaryToWriter
    );
  }
  f = message.getAllocationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.frequencies.FrequencyAllocation.serializeBinaryToWriter
    );
  }
};


/**
 * optional FrequencyBand band = 1;
 * @return {?proto.frequencies.FrequencyBand}
 */
proto.frequencies.FrequencyAllocationBlock.prototype.getBand = function() {
  return /** @type{?proto.frequencies.FrequencyBand} */ (
    jspb.Message.getWrapperField(this, proto.frequencies.FrequencyBand, 1));
};


/**
 * @param {?proto.frequencies.FrequencyBand|undefined} value
 * @return {!proto.frequencies.FrequencyAllocationBlock} returns this
*/
proto.frequencies.FrequencyAllocationBlock.prototype.setBand = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.frequencies.FrequencyAllocationBlock} returns this
 */
proto.frequencies.FrequencyAllocationBlock.prototype.clearBand = function() {
  return this.setBand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.frequencies.FrequencyAllocationBlock.prototype.hasBand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated FrequencyAllocation allocations = 2;
 * @return {!Array<!proto.frequencies.FrequencyAllocation>}
 */
proto.frequencies.FrequencyAllocationBlock.prototype.getAllocationsList = function() {
  return /** @type{!Array<!proto.frequencies.FrequencyAllocation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.frequencies.FrequencyAllocation, 2));
};


/**
 * @param {!Array<!proto.frequencies.FrequencyAllocation>} value
 * @return {!proto.frequencies.FrequencyAllocationBlock} returns this
*/
proto.frequencies.FrequencyAllocationBlock.prototype.setAllocationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.frequencies.FrequencyAllocation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.frequencies.FrequencyAllocation}
 */
proto.frequencies.FrequencyAllocationBlock.prototype.addAllocations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.frequencies.FrequencyAllocation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.frequencies.FrequencyAllocationBlock} returns this
 */
proto.frequencies.FrequencyAllocationBlock.prototype.clearAllocationsList = function() {
  return this.setAllocationsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.frequencies.FrequencyAllocations.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.frequencies.FrequencyAllocations.prototype.toObject = function(opt_includeInstance) {
  return proto.frequencies.FrequencyAllocations.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.frequencies.FrequencyAllocations} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frequencies.FrequencyAllocations.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    region: jspb.Message.getFieldWithDefault(msg, 2, ""),
    parentRegion: jspb.Message.getFieldWithDefault(msg, 3, ""),
    year: jspb.Message.getFieldWithDefault(msg, 4, 0),
    meta: msg.getMeta_asB64(),
    allocationBlocksList: jspb.Message.toObjectList(msg.getAllocationBlocksList(),
    proto.frequencies.FrequencyAllocationBlock.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.frequencies.FrequencyAllocations}
 */
proto.frequencies.FrequencyAllocations.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.frequencies.FrequencyAllocations;
  return proto.frequencies.FrequencyAllocations.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.frequencies.FrequencyAllocations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.frequencies.FrequencyAllocations}
 */
proto.frequencies.FrequencyAllocations.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentRegion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setYear(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMeta(value);
      break;
    case 6:
      var value = new proto.frequencies.FrequencyAllocationBlock;
      reader.readMessage(value,proto.frequencies.FrequencyAllocationBlock.deserializeBinaryFromReader);
      msg.addAllocationBlocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.frequencies.FrequencyAllocations.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.frequencies.FrequencyAllocations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.frequencies.FrequencyAllocations} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.frequencies.FrequencyAllocations.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getYear();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMeta_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getAllocationBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.frequencies.FrequencyAllocationBlock.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.frequencies.FrequencyAllocations.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.frequencies.FrequencyAllocations} returns this
 */
proto.frequencies.FrequencyAllocations.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string region = 2;
 * @return {string}
 */
proto.frequencies.FrequencyAllocations.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.frequencies.FrequencyAllocations} returns this
 */
proto.frequencies.FrequencyAllocations.prototype.setRegion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string parent_region = 3;
 * @return {string}
 */
proto.frequencies.FrequencyAllocations.prototype.getParentRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.frequencies.FrequencyAllocations} returns this
 */
proto.frequencies.FrequencyAllocations.prototype.setParentRegion = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.frequencies.FrequencyAllocations} returns this
 */
proto.frequencies.FrequencyAllocations.prototype.clearParentRegion = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.frequencies.FrequencyAllocations.prototype.hasParentRegion = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 year = 4;
 * @return {number}
 */
proto.frequencies.FrequencyAllocations.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.frequencies.FrequencyAllocations} returns this
 */
proto.frequencies.FrequencyAllocations.prototype.setYear = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes meta = 5;
 * @return {!(string|Uint8Array)}
 */
proto.frequencies.FrequencyAllocations.prototype.getMeta = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes meta = 5;
 * This is a type-conversion wrapper around `getMeta()`
 * @return {string}
 */
proto.frequencies.FrequencyAllocations.prototype.getMeta_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMeta()));
};


/**
 * optional bytes meta = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMeta()`
 * @return {!Uint8Array}
 */
proto.frequencies.FrequencyAllocations.prototype.getMeta_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMeta()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.frequencies.FrequencyAllocations} returns this
 */
proto.frequencies.FrequencyAllocations.prototype.setMeta = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * repeated FrequencyAllocationBlock allocation_blocks = 6;
 * @return {!Array<!proto.frequencies.FrequencyAllocationBlock>}
 */
proto.frequencies.FrequencyAllocations.prototype.getAllocationBlocksList = function() {
  return /** @type{!Array<!proto.frequencies.FrequencyAllocationBlock>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.frequencies.FrequencyAllocationBlock, 6));
};


/**
 * @param {!Array<!proto.frequencies.FrequencyAllocationBlock>} value
 * @return {!proto.frequencies.FrequencyAllocations} returns this
*/
proto.frequencies.FrequencyAllocations.prototype.setAllocationBlocksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.frequencies.FrequencyAllocationBlock=} opt_value
 * @param {number=} opt_index
 * @return {!proto.frequencies.FrequencyAllocationBlock}
 */
proto.frequencies.FrequencyAllocations.prototype.addAllocationBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.frequencies.FrequencyAllocationBlock, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.frequencies.FrequencyAllocations} returns this
 */
proto.frequencies.FrequencyAllocations.prototype.clearAllocationBlocksList = function() {
  return this.setAllocationBlocksList([]);
};


goog.object.extend(exports, proto.frequencies);
